{"version":3,"sources":["images/cw_fullLogo.svg","styles/globalStyles.js","components/Home.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GlobalStyle","createGlobalStyle","HomeWrapper","styled","section","Home","Component","Nav","nav","FullLogo","img","NavLinkWrapper","div","Navbar","src","logo","alt","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,yC,i+CCE3C,IAOaC,EAAcC,YAAH,IAPL,UACL,8BACA,UACA,UAED,8BALM,UAKN,UADM,W,wPCHnB,IAAMC,EAAcC,IAAOC,QAAV,KAaIC,E,iLAEjB,OACE,kBAACH,EAAD,KACE,6BACE,sDACoB,6BADpB,4DAKA,+LACA,mD,GAXwBI,a,saCXlC,IAAMC,EAAMJ,IAAOK,IAAV,KAMHC,EAAWN,IAAOO,IAAV,KAIRC,EAAiBR,IAAOS,IAAV,KASCC,E,iLAEjB,OACE,kBAACN,EAAD,KACE,kBAACE,EAAD,CAAUK,IAAKC,IAAMC,IAAI,YACzB,kBAACL,EAAD,KACE,uBAAGM,KAAK,KAAR,SACA,uBAAGA,KAAK,KAAR,QACA,uBAAGA,KAAK,KAAR,iB,GAR0BX,aCJrBY,MAdf,WACE,OACE,oCACE,kBAAClB,EAAD,MACA,gCACE,kBAAC,EAAD,OAEF,8BACE,kBAAC,EAAD,SCFYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ab14531f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cw_fullLogo.19511ca2.svg\";","import { createGlobalStyle } from 'styled-components'\n\nconst background = '#17161C'\nconst text1 = '#5588F5'\nconst text2 = '#50A8F5'\nconst text3 = '#D5E1EF'\nconst activeLink = '#F6676D'\nconst link = '#8AEAFF'\n\nexport const GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css?family=IBM+Plex+Mono:500,600|Muli:400,700&display=swap');\n\n  body {\n    margin: 0 80px;\n    background-color: ${background};\n  }\n\n  h1 {\n    font-family: Muli;\n    font-size: 60px;\n    font-weight: 700;\n    color: ${text1};\n    letter-spacing: 0.02em;\n    /* line-height: 0.075em; */\n  }\n\n  h2 {\n    font-family: 'IBM Plex Mono';\n    font-size: 50px;\n    font-weight: 600;\n    color: ${text1}\n  }\n\n  h3 {\n    font-family: 'IBM Plex Mono';\n    font-size: 28px;\n    font-weight: 600;\n    color: ${text1}\n  }\n\n  h4 {\n    font-family: 'IBM Plex Mono';\n    font-size: 20px;\n    font-weight: 500;\n    color: ${text2}\n  }\n\n  p {\n    font-family: Muli;\n    font-size: 20px;\n    font-weight: 400;\n    color: ${text3};\n    letter-spacing: 0.02em;\n  }\n\n  button {\n    font-family: 'IBM Plex Mono';\n    font-size: 20px;\n    font-weight: 500;\n    color: ${link};\n    border: 3px solid ${link};\n    padding: 8.5px 20px;\n    background-color: inherit;\n    transition: all 0.2s;\n\n    &:hover {\n      background-color: ${link};\n      color: ${background};\n    }\n  }\n\n  a {\n    font-family: 'IBM Plex Mono';\n    font-size: 22px;\n    font-weight: 500;\n    color: ${link};\n    text-decoration: none;\n    transition: all 0.2s;\n\n    &:hover {\n      color: ${activeLink}\n    }\n  }\n`\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\n\nconst HomeWrapper = styled.section`\n  display: grid;\n  grid-template-columns: repeat(2, 50%);\n\n  > div {\n    grid-column-start: 2;\n  }\n\n  p {\n      margin: 80px 0;\n  }\n`\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <HomeWrapper>\n        <div>\n          <h1>\n            Hello, I’m Chawit.<br/>\n            A very energetic, colourful\n            and determined web developer\n          </h1>\n          <p>I have a strong belief in a well-organised and systematic coding. I’m always willing to learn more and develop my skills as well as building good websites.</p>\n          <button>Read More</button>\n        </div>\n      </HomeWrapper>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\n\nimport logo from '../images/cw_fullLogo.svg'\n\nconst Nav = styled.nav`\n  display: flex;\n  justify-content: space-between;\n  padding: 35px 0;\n`\n\nconst FullLogo = styled.img`\n  height: 50px;\n`\n\nconst NavLinkWrapper = styled.div`\n  display: flex;\n  align-items: center;\n\n  > a:not(:last-of-type) {\n    margin-right: 80px;\n  }\n`\n\nexport default class Navbar extends Component {\n  render() {\n    return (\n      <Nav>\n        <FullLogo src={logo} alt='cw logo'/>\n        <NavLinkWrapper>\n          <a href='#'>About</a>\n          <a href='#'>Work</a>\n          <a href='#'>Contact</a>\n        </NavLinkWrapper>\n      </Nav>\n    )\n  }\n}\n","import React from 'react';\n\nimport { GlobalStyle } from './styles/globalStyles';\nimport Home from './components/Home';\nimport Navbar from './components/Navbar';\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <header>\n        <Navbar />\n      </header>\n      <main>\n        <Home />\n      </main>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}